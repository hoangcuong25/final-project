
import { CourseType, PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const seedCourses = async () => {
  console.log("üå± Seeding Courses...");

  const approvedInstructors = await prisma.instructorApplication.findMany({
    where: { status: "APPROVED" },
    include: { user: true },
  });

  if (approvedInstructors.length === 0) {
    console.warn("‚ö†Ô∏è No approved instructors found to create courses!");
    return;
  }

  const specializations = await prisma.specialization.findMany();
  if (specializations.length === 0) {
    console.warn("‚ö†Ô∏è No specializations found to assign to courses!");
    return;
  }

  const thumbnailUrl =
    "https://res.cloudinary.com/dtaawt3ej/image/upload/v1747292486/q9lmgugyqgrm7q5voatw.jpg";

  const coursesData = [
    {
      title: "Kh√≥a h·ªçc ReactJS C∆° b·∫£n ƒë·∫øn N√¢ng cao",
      description:
        "Kh√≥a h·ªçc gi√∫p b·∫°n n·∫Øm v·ªØng React, JSX, hooks, v√† c√°ch x√¢y d·ª±ng ·ª©ng d·ª•ng th·ª±c t·∫ø.",
      price: 499000,
      type: CourseType.PAID,
      isPublished: true,
      duration: 720, // 12 hours
      specializationNames: ["Ph√°t tri·ªÉn Web", "React"],
      chapters: [
        {
          title: "Ch∆∞∆°ng 1: Gi·ªõi thi·ªáu v·ªÅ React",
          lessons: [
            { title: "B√†i 1: React l√† g√¨?", duration: 15 },
            { title: "B√†i 2: C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng", duration: 25 },
          ],
        },
        {
          title: "Ch∆∞∆°ng 2: Component v√† Props",
          lessons: [
            { title: "B√†i 3: Function Component", duration: 30 },
            { title: "B√†i 4: Class Component", duration: 35 },
          ],
        },
      ],
    },
    {
      title: "L·∫≠p tr√¨nh Node.js v·ªõi NestJS",
      description:
        "H·ªçc c√°ch x√¢y d·ª±ng backend m·∫°nh m·∫Ω, b·∫£o m·∫≠t v√† d·ªÖ m·ªü r·ªông v·ªõi NestJS.",
      price: 599000,
      type: CourseType.PAID,
      isPublished: true,
      duration: 960, // 16 hours
      specializationNames: ["Ph√°t tri·ªÉn Web", "Backend", "Node.js"],
      chapters: [
        {
          title: "Ch∆∞∆°ng 1: B·∫Øt ƒë·∫ßu v·ªõi NestJS",
          lessons: [
            { title: "B√†i 1: Gi·ªõi thi·ªáu NestJS", duration: 20 },
            { title: "B√†i 2: Controllers v√† Services", duration: 40 },
          ],
        },
      ],
    },
    {
      title: "Thi·∫øt k·∫ø UI/UX hi·ªán ƒë·∫°i v·ªõi Figma",
      description:
        "Kh√≥a h·ªçc h∆∞·ªõng d·∫´n quy tr√¨nh thi·∫øt k·∫ø tr·∫£i nghi·ªám ng∆∞·ªùi d√πng chuy√™n nghi·ªáp.",
      price: 0,
      type: CourseType.FREE,
      isPublished: true,
      duration: 480, // 8 hours
      specializationNames: ["Thi·∫øt k·∫ø UI/UX"],
      chapters: [
        {
          title: "Ch∆∞∆°ng 1: L√†m quen v·ªõi Figma",
          lessons: [{ title: "B√†i 1: Giao di·ªán v√† c√¥ng c·ª•", duration: 45 }],
        },
      ],
    },
    {
      title: "Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông v·ªõi React Native",
      description:
        "T·∫°o ·ª©ng d·ª•ng cross-platform ho√†n ch·ªânh b·∫±ng React Native v√† Expo.",
      price: 699000,
      type: CourseType.PAID,
      isPublished: false, // Unpublished course
      duration: 1200, // 20 hours
      specializationNames: ["Ph√°t tri·ªÉn di ƒë·ªông", "React"],
      chapters: [],
    },
    {
      title: "C·∫•u tr√∫c d·ªØ li·ªáu & Gi·∫£i thu·∫≠t",
      description:
        "N·∫Øm v·ªØng c√°c thu·∫≠t to√°n c·ªët l√µi v√† c·∫•u tr√∫c d·ªØ li·ªáu ƒë·ªÉ ph·ªèng v·∫•n th√†nh c√¥ng.",
      price: 299000,
      type: CourseType.PAID,
      isPublished: true,
      duration: 600, // 10 hours
      specializationNames: ["Thu·∫≠t to√°n", "Ph√°t tri·ªÉn Web"],
      chapters: [
        {
          title: "Ch∆∞∆°ng 1: M·∫£ng v√† Chu·ªói",
          lessons: [
            { title: "B√†i 1: Thao t√°c v·ªõi m·∫£ng", duration: 50 },
            { title: "B√†i 2: C√°c b√†i to√°n chu·ªói ph·ªï bi·∫øn", duration: 70 },
          ],
        },
      ],
    },
  ];

  for (let i = 0; i < coursesData.length; i++) {
    const courseData = coursesData[i];
    const instructor = approvedInstructors[i % approvedInstructors.length].user;

    const courseSpecializations = specializations
      .filter((s) => courseData.specializationNames.includes(s.name))
      .map((s) => ({
        specialization: {
          connect: { id: s.id },
        },
      }));

    const createdCourse = await prisma.course.create({
      data: {
        title: courseData.title,
        description: courseData.description,
        price: courseData.price,
        thumbnail: thumbnailUrl,
        instructorId: instructor.id,
        type: courseData.type,
        isPublished: courseData.isPublished,
        duration: courseData.duration,
        specializations: {
          create: courseSpecializations,
        },
        chapter: {
          create: courseData.chapters.map((chapter, chapterIndex) => ({
            title: chapter.title,
            orderIndex: chapterIndex,
            lessons: {
              create: chapter.lessons.map((lesson, lessonIndex) => ({
                title: lesson.title,
                duration: lesson.duration,
                orderIndex: lessonIndex,
                videoUrl:
                  "https://res.cloudinary.com/dtaawt3ej/video/upload/v1747292486/sample.mp4",
              })),
            },
          })),
        },
      },
    });

    console.log(
      `‚úÖ Created course: ${createdCourse.title} (Instructor: ${instructor.fullname})`
    );
  }

  console.log("üéâ Seed Courses completed successfully!");
};
