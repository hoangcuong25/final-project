generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// ─── USER ──────────────────────────────
model User {
  id       Int       @id @default(autoincrement())
  fullname String    @db.VarChar(50)
  email    String    @unique
  password String    @db.VarChar(100)
  avatar   String    @default("https://res.cloudinary.com/dtaawt3ej/image/upload/v1747292486/q9lmgugyqgrm7q5voatw.jpg")
  gender   Gender?
  dob      DateTime? @db.Date
  address  String?
  role     UserRole  @default(USER)
  phone    String?

  isVerified             Boolean   @default(false)
  resetOtp               String?
  resetOtpExpires        DateTime?
  verificationOtp        String?
  verificationOtpExpires DateTime?

  refreshToken        String?   @db.Text
  refreshTokenExpires DateTime?

  // Relations
  instructorApplications InstructorApplication[]
  courses                Course[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─── INSTRUCTOR APPLICATION ──────────────────────────────
model InstructorApplication {
  id             Int                @id @default(autoincrement())
  userId         Int
  experience     String?            @db.Text
  bio            String?            @db.Text
  status         ApplicationStatus  @default(PENDING)
  reviewedAt     DateTime?
  reviewedBy     Int?

  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicationSpecializations ApplicationSpecializations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─── SPECIALIZATION ──────────────────────────────
model Specialization {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100)
  desc     String?   @db.Text

  // Relations
  applicationSpecializations ApplicationSpecializations[]
  courseSpecializations      CourseSpecialization[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApplicationSpecializations {
  applicationId     Int
  specializationId  Int

  application       InstructorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  specialization    Specialization        @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([applicationId, specializationId])
}

// ─── COURSE MODULE ──────────────────────────────
model Course {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(150)
  description   String?   @db.Text
  thumbnail     String?   // Cloudinary URL
  price         Float     @default(0)
  isPublished   Boolean   @default(false)

  // Relations
  instructorId  Int
  instructor    User       @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  lessons       Lesson[]
  specializations CourseSpecialization[] 

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Lesson {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(150)
  content     String?   @db.Text     // HTML content
  videoUrl    String?   // Cloudinary URL
  orderIndex  Int       @default(0)

  // Relations
  courseId    Int
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// ─── N-N RELATION: Course ↔ Specialization ──────────────
model CourseSpecialization {
  courseId         Int
  specializationId Int

  course           Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  specialization   Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([courseId, specializationId])
}
