generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CourseType {
  FREE
  PAID
}

// ─── USER ──────────────────────────────
model User {
  id        Int       @id @default(autoincrement())
  fullname  String    @db.VarChar(50)
  email     String    @unique
  password  String    @db.VarChar(100)
  avatar    String    @default("https://res.cloudinary.com/dtaawt3ej/image/upload/v1747292486/q9lmgugyqgrm7q5voatw.jpg")
  gender    Gender?
  dob       DateTime? @db.Date
  address   String?
  role      UserRole  @default(USER)
  phone     String?

  isVerified             Boolean   @default(false)
  resetOtp               String?
  resetOtpExpires        DateTime?
  verificationOtp        String?
  verificationOtpExpires DateTime?

  refreshToken        String?   @db.Text
  refreshTokenExpires DateTime?

  // Relations
  instructorApplications InstructorApplication[]
  
  courses                Course[]
  CourseRating CourseRating[]
  CourseView CourseView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─── INSTRUCTOR APPLICATION ──────────────────────────────
model InstructorApplication {
  id         Int               @id @default(autoincrement())
  userId     Int
  experience String?            @db.Text
  bio        String?            @db.Text
  status     ApplicationStatus  @default(PENDING)
  reviewedAt DateTime?
  reviewedBy Int?

  // Relations
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicationSpecializations ApplicationSpecialization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─── SPECIALIZATION ──────────────────────────────
model Specialization {
  id       Int     @id @default(autoincrement())
  name     String  @unique @db.VarChar(100)
  desc     String? @db.Text

  // Relations
  applicationSpecializations ApplicationSpecialization[]
  courseSpecializations      CourseSpecialization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─── JUNCTION: InstructorApplication ↔ Specialization ──────────────────────────────
model ApplicationSpecialization {
  applicationId    Int
  specializationId Int

  application      InstructorApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  specialization   Specialization        @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([applicationId, specializationId])
}

// ─── COURSE ──────────────────────────────
model Course {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(150)
  description  String?    @db.Text
  thumbnail    String?    // Cloudinary URL
  price        Float      @default(0)
  type         CourseType @default(FREE)
  isPublished  Boolean    @default(false)
  viewCount    Int        @default(0)
  duration     Int        @default(0) // Tổng thời lượng (phút)

  // Relations
  instructorId Int
  instructor   User        @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  lessons      Lesson[]
  specializations CourseSpecialization[]

  CourseRating CourseRating[]
  CourseView CourseView[]
  Chapter Chapter[]

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// ─── COURSE VIEW ──────────────────────────────
model CourseView {
  id        Int      @id @default(autoincrement())
  courseId  Int
  userId    Int?
  ipAddress String?
  viewedAt  DateTime @default(now())

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId, ipAddress])
}

// ─── CHAPTER ──────────────────────────────
model Chapter {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(150)
  description String?   @db.Text
  orderIndex  Int       @default(0)
  duration    Int       @default(0) // Tổng thời lượng (phút)

  // Relations
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, orderIndex]) // mỗi course có thứ tự chapter riêng
}

// ─── LESSON ──────────────────────────────
model Lesson {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(150)
  content     String?   @db.Text     // HTML content
  videoUrl    String?   // Cloudinary URL
  orderIndex  Int       @default(0)
  duration    Int       @default(0) // Tổng thời lượng (phút)

  // Relations
  courseId    Int
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  quizzes Quiz[]

  chapterId   Int?
  chapter     Chapter?   @relation(fields: [chapterId], references: [id], onDelete: SetNull)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// ─── JUNCTION: Course ↔ Specialization ──────────────
model CourseSpecialization {
  courseId         Int
  specializationId Int

  course           Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  specialization   Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)

  @@id([courseId, specializationId])
}

// ─── QUIZ ──────────────────────────────
model Quiz {
  id        Int       @id @default(autoincrement())
  title     String     @db.VarChar(150)
  lessonId  Int        
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions Question[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// ─── QUESTION ──────────────────────────────
model Question {
  id           Int       @id @default(autoincrement())
  questionText String     @db.Text
  quizId       Int
  quiz         Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options      Option[]   // Nhiều lựa chọn (multiple choice)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ─── OPTION ──────────────────────────────
model Option {
  id          Int      @id @default(autoincrement())
  text        String   @db.VarChar(255)
  isCorrect   Boolean  @default(false)
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// ─── COURSE RATING ──────────────────────────────
model CourseRating {
  id        Int      @id @default(autoincrement())
  rating    Int      @db.TinyInt // giá trị 1–5

  // Relations
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) // mỗi user chỉ được rate 1 lần / course
}
