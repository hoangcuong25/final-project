"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { PlusCircle, Trash2, CheckCircle } from "lucide-react";
import { useDispatch } from "react-redux";
import { AppDispatch } from "@/store";
import { toast } from "sonner";
import { updateQuestion } from "@/store/question.slice";
import { createOption, deleteOption, updateOption } from "@/store/option.slice";
import DeleteOption from "./DeleteQuestion";

interface EditQuestionProps {
  question: any;
  onUpdated: () => void;
  currentQuiz: QuizType;
}

const EditQuestion: React.FC<EditQuestionProps> = ({
  question,
  onUpdated,
  currentQuiz,
}) => {
  const dispatch = useDispatch<AppDispatch>();
  const [open, setOpen] = useState(false);
  const [deleteConfirmId, setDeleteConfirmId] = useState<number | null>(null);

  const {
    register,
    handleSubmit,
    reset,
    formState: { isSubmitting },
  } = useForm({
    defaultValues: {
      questionText: question.questionText,
    },
  });

  // Copy m·∫£ng options g·ªëc ƒë·ªÉ ch·ªânh s·ª≠a t·∫°m th·ªùi
  const [options, setOptions] = useState<any[]>(question.options || []);
  const [newOptionText, setNewOptionText] = useState("");

  console.log("options:", options);

  // üß© C·∫≠p nh·∫≠t c√¢u h·ªèi & c√°c l·ª±a ch·ªçn
  const onSubmit = async (data: any) => {
    try {
      // Update question
      await dispatch(
        updateQuestion({
          id: question.id,
          payload: { questionText: data.questionText },
        })
      ).unwrap();

      // Update or create options
      for (const opt of options) {
        if (opt.id) {
          await dispatch(
            updateOption({
              id: opt.id,
              payload: { text: opt.text, isCorrect: opt.isCorrect },
            })
          ).unwrap();
        } else {
          await dispatch(
            createOption({
              text: opt.text,
              isCorrect: opt.isCorrect,
              questionId: question.id,
            })
          ).unwrap();
        }
      }

      toast.success("C·∫≠p nh·∫≠t c√¢u h·ªèi v√† l·ª±a ch·ªçn th√†nh c√¥ng!");
      setOpen(false);
      onUpdated();
    } catch {
      toast.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };

  // üß© Th√™m option t·∫°m th·ªùi
  const handleAddOption = () => {
    if (!newOptionText.trim()) {
      toast.error("N·ªôi dung l·ª±a ch·ªçn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }
    setOptions([
      ...options,
      { id: Date.now(), text: newOptionText, isCorrect: false, temp: true },
    ]);
    setNewOptionText("");
  };

  // üß© ƒê√°nh d·∫•u ƒë√∫ng (ch·ªâ cho 1 option ƒë√∫ng)
  const handleMarkCorrect = (id: number) => {
    setOptions((prev) =>
      prev.map((opt) => ({
        ...opt,
        isCorrect: opt.id === id,
      }))
    );
  };

  // üß© X√≥a option (confirm ri√™ng)
  const handleDeleteOption = async (id: number) => {
    try {
      // N·∫øu l√† option c≈© (ƒë√£ c√≥ trong DB)
      if (!String(id).startsWith("temp")) {
        await dispatch(deleteOption(id)).unwrap();
      }
      setOptions((prev) => prev.filter((opt) => opt.id !== id));
      toast.success("X√≥a l·ª±a ch·ªçn th√†nh c√¥ng!");
    } catch {
      toast.error("X√≥a l·ª±a ch·ªçn th·∫•t b·∫°i!");
    } finally {
      setDeleteConfirmId(null);
    }
  };

  return (
    <>
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogTrigger asChild>
          <Button variant="outline" size="sm">
            S·ª≠a
          </Button>
        </DialogTrigger>

        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a c√¢u h·ªèi & l·ª±a ch·ªçn</DialogTitle>
          </DialogHeader>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            {/* üß© C√¢u h·ªèi */}
            <div>
              <label className="text-sm font-medium">N·ªôi dung c√¢u h·ªèi</label>
              <Textarea
                {...register("questionText", { required: true })}
                rows={3}
                placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi..."
              />
            </div>

            {/* üß© Qu·∫£n l√Ω l·ª±a ch·ªçn */}
            <div className="pt-2 space-y-3 border-t">
              <h3 className="font-semibold text-gray-800">
                Danh s√°ch l·ª±a ch·ªçn
              </h3>
              <div className="flex justify-between items-center">
                <div className="flex w-full gap-2">
                  <Input
                    placeholder="Th√™m l·ª±a ch·ªçn m·ªõi..."
                    value={newOptionText}
                    onChange={(e) => setNewOptionText(e.target.value)}
                  />
                  <Button
                    type="button"
                    onClick={handleAddOption}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    <PlusCircle className="w-4 h-4 mr-1" />
                    Th√™m
                  </Button>
                </div>
              </div>

              {/* Danh s√°ch c√°c option */}
              <div className="space-y-2">
                {options.map((opt) => (
                  <div
                    key={opt.id}
                    className="flex items-center justify-between border rounded-md p-2 bg-gray-50"
                  >
                    <Input
                      value={opt.text}
                      onChange={(e) =>
                        setOptions((prev) =>
                          prev.map((o) =>
                            o.id === opt.id ? { ...o, text: e.target.value } : o
                          )
                        )
                      }
                    />
                    <div className="flex gap-2 items-center">
                      <Button
                        type="button"
                        size="icon"
                        variant="outline"
                        onClick={() => handleMarkCorrect(opt.id)}
                      >
                        <CheckCircle
                          className={`w-4 h-4 ${
                            opt.isCorrect ? "text-green-600" : "text-gray-400"
                          }`}
                        />
                      </Button>
                      <Button
                        type="button"
                        size="icon"
                        variant="outline"
                        onClick={() => setDeleteConfirmId(opt.id)}
                      >
                        <Trash2 className="w-4 h-4 text-red-500" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => setOpen(false)}
              >
                H·ªßy
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isSubmitting ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* AlertDialog Confirm Delete */}
      <DeleteOption
        open={!!deleteConfirmId}
        onClose={() => setDeleteConfirmId(null)}
        onConfirm={() => handleDeleteOption(deleteConfirmId!)}
      />
    </>
  );
};

export default EditQuestion;
