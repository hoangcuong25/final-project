"use client";

import React, { useState } from "react";
import { useForm } from "react-hook-form";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { PlusCircle, CheckCircle, Trash2 } from "lucide-react";
import { useDispatch } from "react-redux";
import { AppDispatch } from "@/store";
import { Textarea } from "@/components/ui/textarea";
import { createQuestion } from "@/store/question.slice";
import { toast } from "sonner";

interface CreateQuestionProps {
  quizId: number;
}

const CreateQuestion: React.FC<CreateQuestionProps> = ({ quizId }) => {
  const dispatch = useDispatch<AppDispatch>();
  const [open, setOpen] = useState(false);

  // Form t·∫°o c√¢u h·ªèi
  const {
    register,
    handleSubmit,
    reset,
    formState: { isSubmitting },
  } = useForm({
    defaultValues: { questionText: "" },
  });

  // State sau khi t·∫°o xong question
  const [createdQuestionId, setCreatedQuestionId] = useState<number | null>(
    null
  );

  // State qu·∫£n l√Ω danh s√°ch option t·∫°m th·ªùi
  const [options, setOptions] = useState<
    { id: number; text: string; isCorrect: boolean }[]
  >([]);
  const [optionText, setOptionText] = useState("");

  // üß© G·ª≠i API t·∫°o c√¢u h·ªèi
  const onSubmit = async (values: any) => {
    try {
      const payload = { ...values, quizId };
      const result = await dispatch(createQuestion(payload)).unwrap();
      setCreatedQuestionId(result.data.id); // l∆∞u id c·ªßa c√¢u h·ªèi v·ª´a t·∫°o
      toast.success("C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.");
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi.");
    }
  };

  // Th√™m option t·∫°m
  const handleAddOption = () => {
    if (!optionText.trim()) {
      toast.error("N·ªôi dung ƒë√°p √°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      return;
    }
    setOptions([
      ...options,
      {
        id: Date.now(),
        text: optionText,
        isCorrect: false,
      },
    ]);
    setOptionText("");
  };

  // ƒê√°nh d·∫•u option ƒë√∫ng
  const handleMarkCorrect = (id: number) => {
    setOptions((prev) =>
      prev.map((opt) =>
        opt.id === id
          ? { ...opt, isCorrect: true }
          : { ...opt, isCorrect: false }
      )
    );
  };

  // X√≥a option
  const handleDeleteOption = (id: number) => {
    setOptions((prev) => prev.filter((opt) => opt.id !== id));
  };

  // L∆∞u option v√†o DB 
  const handleSaveOptions = async () => {
    if (!createdQuestionId) {
      toast.error("B·∫°n c·∫ßn t·∫°o c√¢u h·ªèi tr∆∞·ªõc khi th√™m ƒë√°p √°n.");
      return;
    }

    if (options.length === 0) {
      toast.error("H√£y th√™m √≠t nh·∫•t 1 l·ª±a ch·ªçn.");
      return;
    }

    // TODO: G·ªçi API /option/create (t√πy backend c·ªßa b·∫°n)
    toast.success("C√°c l·ª±a ch·ªçn ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
    setOptions([]);
    setOptionText("");
    setOpen(false);
    reset();
    setCreatedQuestionId(null);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700">
          <PlusCircle className="w-4 h-4" /> T·∫°o c√¢u h·ªèi
        </Button>
      </DialogTrigger>

      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>üß© T·∫°o c√¢u h·ªèi v√† ƒë√°p √°n</DialogTitle>
        </DialogHeader>

        {/* PH·∫¶N 1: T·∫†O C√ÇU H·ªéI */}
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="space-y-4 border-b pb-4"
        >
          <div className="text-sm text-gray-600">
            <strong>Quiz ID:</strong> {quizId}
          </div>

          <div className="space-y-1">
            <label className="text-sm font-medium">N·ªôi dung c√¢u h·ªèi</label>
            <Textarea
              {...register("questionText", { required: true })}
              placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi..."
              rows={3}
              disabled={!!createdQuestionId}
            />
          </div>

          {!createdQuestionId && (
            <DialogFooter className="flex justify-end gap-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setOpen(false)}
              >
                H·ªßy
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isSubmitting ? "ƒêang l∆∞u..." : "L∆∞u c√¢u h·ªèi"}
              </Button>
            </DialogFooter>
          )}
        </form>

        {/* PH·∫¶N 2: T·∫†O C√ÅC L·ª∞A CH·ªåN (OPTION) */}
        {createdQuestionId && (
          <div className="pt-4 space-y-4">
            <h3 className="font-semibold text-gray-800">
              ‚úèÔ∏è Th√™m l·ª±a ch·ªçn cho c√¢u h·ªèi
            </h3>

            <div className="flex gap-2">
              <Input
                placeholder="Nh·∫≠p n·ªôi dung ƒë√°p √°n..."
                value={optionText}
                onChange={(e) => setOptionText(e.target.value)}
              />
              <Button
                type="button"
                onClick={handleAddOption}
                className="bg-green-600 hover:bg-green-700"
              >
                Th√™m
              </Button>
            </div>

            {/* Danh s√°ch option */}
            <div className="space-y-2">
              {options.map((opt) => (
                <div
                  key={opt.id}
                  className="flex items-center justify-between border rounded-md p-2"
                >
                  <span
                    className={`${
                      opt.isCorrect
                        ? "text-green-600 font-medium"
                        : "text-gray-800"
                    }`}
                  >
                    {opt.text} {opt.isCorrect && "‚úÖ"}
                  </span>
                  <div className="flex gap-2">
                    <Button
                      type="button"
                      size="sm"
                      variant="outline"
                      onClick={() => handleMarkCorrect(opt.id)}
                    >
                      <CheckCircle className="w-4 h-4 text-green-600" />
                    </Button>
                    <Button
                      type="button"
                      size="sm"
                      variant="outline"
                      onClick={() => handleDeleteOption(opt.id)}
                    >
                      <Trash2 className="w-4 h-4 text-red-500" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>

            <DialogFooter className="flex justify-end">
              <Button
                type="button"
                onClick={handleSaveOptions}
                className="bg-blue-600 hover:bg-blue-700"
              >
                L∆∞u t·∫•t c·∫£ l·ª±a ch·ªçn
              </Button>
            </DialogFooter>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default CreateQuestion;
