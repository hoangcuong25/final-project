export {};

declare global {
  type PaginationParams = {
    page?: number;
    limit?: number;
    search?: string;
    sortBy?: string;
    order?: "asc" | "desc";
  };

  type UserType = {
    id: number;
    fullname: string;
    email: string;
    avatar: string;
    gender: string;
    dob: string;
    address: string;
    phone: string;
    isVerified: boolean;
    role: string;
    createdAt?: string;
    updatedAt?: string;
    createdBy?: string;
    updatedBy?: string;
  };

  type UserUpdateResponseType = {
    id: string;
    fullname: string;
    avatar: string;
    age: string;
    gender: genderEnum;
    dob: string;
    address: string;
    phone: string;
  };

  enum genderEnum {
    MALE = "MALE",
    FEMALE = "FEMALE",
    OTHER = "OTHER",
  }

  type InstructorApplicationType = {
    id: number;
    userId: number;
    experience?: string;
    bio?: string;
    status: "PENDING" | "APPROVED" | "REJECTED";
    reviewedAt?: string;
    reviewedBy?: number;
    createdAt: string;
    updatedAt: string;
    applicationSpecializations?: {
      specialization: {
        id: number;
        name: string;
        desc?: string;
      };
    }[];
    user?: {
      id: number;
      fullname: string;
      email: string;
    };
  };

  type SpecializationType = {
    id: number;
    name: string;
    desc?: string;
    createdAt: string;
    updatedAt: string;
  };

  // üß© CourseType ‚Äî ƒë·∫°i di·ªán cho m·ªôt kh√≥a h·ªçc
  type CourseType = {
    lessons: any;
    chapter: ChapterType[];
    id: number;
    title: string;
    description?: string;
    thumbnail?: string;
    price: number;
    isPublished: boolean;

    instructorId: number;
    instructor?: Pick<UserType, "id" | "fullname" | "email" | "avatar">;

    // Danh s√°ch chuy√™n ng√†nh / ch·ªß ƒë·ªÅ (qua b·∫£ng trung gian)
    specializations?: {
      specialization: SpecializationType;
    }[];

    createdAt: string;
    updatedAt: string;
  };

  // üß© LessonType ‚Äî cho t·ª´ng b√†i h·ªçc trong kh√≥a
  type LessonType = {
    id: number;
    title: string;
    content?: string;
    videoUrl?: string;
    orderIndex: number;
    duration: number; // Th·ªùi l∆∞·ª£ng b√†i h·ªçc
    chapter: ChapterType;
    quizzes?: QuizType[];
    courseId: number;
    course?: Pick<CourseType, "id" | "title">;
    createdAt: string;
    updatedAt: string;
  };

  // üß© CourseSpecializationType ‚Äî mapping Course ‚Üî Specialization
  type CourseSpecializationType = {
    courseId: number;
    specializationId: number;
    specialization?: SpecializationType;
  };

  // üß© OptionType ‚Äî ƒë·∫°i di·ªán cho t·ª´ng l·ª±a ch·ªçn (ƒë√°p √°n)
  type OptionType = {
    id: number;
    text: string; // N·ªôi dung l·ª±a ch·ªçn
    isCorrect: boolean; // C√≥ ph·∫£i ƒë√°p √°n ƒë√∫ng kh√¥ng
    questionId: number;
    createdAt: string;
    updatedAt: string;
  };

  // üß© QuestionType ‚Äî ƒë·∫°i di·ªán cho m·ªôt c√¢u h·ªèi trong quiz
  type QuestionType = {
    id: number;
    questionText: string; // N·ªôi dung c√¢u h·ªèi
    quizId: number;
    options?: OptionType[]; // Danh s√°ch l·ª±a ch·ªçn
    createdAt: string;
    updatedAt: string;
  };

  // üß© QuizType ‚Äî ƒë·∫°i di·ªán cho b√†i quiz (g·∫Øn v·ªõi 1 lesson duy nh·∫•t)
  type QuizType = {
    _count: any;
    id: number;
    title: string; // T√™n quiz
    lessonId: number;
    lesson?: Pick<LessonType, "id" | "title" | "orderIndex" | "courseId">; // Th√¥ng tin b√†i h·ªçc (n·∫øu c√≥)
    questions?: QuestionType[]; // Danh s√°ch c√¢u h·ªèi
    createdAt: string;
    updatedAt: string;
  };

  type ChapterType = {
    id: number;
    title: string;
    description?: string;
    courseId: number;
    orderIndex: number;
    lessons?: LessonType[];
    createdAt?: string;
    updatedAt?: string;
  };

  enum CouponTargetEnum {
    ALL = "ALL",
    COURSE = "COURSE",
    SPECIALIZATION = "SPECIALIZATION",
  }

  type CouponType = {
    id: number;
    code: string;
    percentage: number; // % gi·∫£m gi√°
    maxUsage?: number | null; // Gi·ªõi h·∫°n s·ªë l·∫ßn d√πng
    usedCount: number; // S·ªë l·∫ßn ƒë√£ d√πng
    expiresAt?: string | null; // H·∫°n s·ª≠ d·ª•ng
    isActive: boolean;
    target: CouponTargetEnum;

    // Quan h·ªá
    createdById: number;
    createdBy?: Pick<UserType, "id" | "fullname" | "email">;

    courseId?: number | null;
    course?: Pick<CourseType, "id" | "title"> | null;

    specializationId?: number | null;
    specialization?: Pick<SpecializationType, "id" | "name"> | null;

    // C√°c quan h·ªá ph·ª•
    couponUsages?: CouponUsageType[];
    discountCampaigns?: DiscountCampaignType[];

    createdAt: string;
    updatedAt: string;
  };

  type CouponUsageType = {
    id: number;
    couponId: number;
    userId: number;
    usedAt: string;

    coupon?: Pick<CouponType, "id" | "code" | "percentage">;
    user?: Pick<UserType, "id" | "fullname" | "email">;
  };

  type DiscountCampaignType = {
    id: number;
    title: string;
    description?: string;
    percentage: number;
    startsAt: string;
    endsAt: string;
    isActive: boolean;

    createdById: number;
    createdBy?: Pick<UserType, "id" | "fullname">;

    coupons?: Pick<CouponType, "id" | "code" | "percentage">[];

    createdAt: string;
    updatedAt: string;
  };
}
